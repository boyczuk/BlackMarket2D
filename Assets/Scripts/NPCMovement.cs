using System.Collections.Generic;
using UnityEngine;

public class NPCMovement : MonoBehaviour
{
    public float speed = 2f; // Movement speed
    private int targetIndex;
    private List<Node> path; // Path generated by A*
    private GridManager gridManager; // Reference to GridManager for nodeRadius and unwalkableMask

    void Start()
    {
        // Get the reference to GridManager
        gridManager = FindObjectOfType<GridManager>();
    }

    public void SetPath(List<Node> newPath)
    {
        path = newPath;
        targetIndex = 0; // Reset to the first node
    }

    void Update()
    {
        if (path != null)
        {
            MoveAlongPath();
        }
    }

    void MoveAlongPath()
    {
        if (targetIndex >= path.Count)
            return;

        Vector3 targetPosition = path[targetIndex].worldPosition;

        Debug.Log("NPC moving towards: " + targetPosition);
        Debug.Log("NPC current position: " + transform.position);

        // Check for potential collisions with walls and avoid
        AvoidWalls();

        transform.position = Vector3.MoveTowards(
            transform.position,
            targetPosition,
            speed * Time.deltaTime
        );

        if (Vector3.Distance(transform.position, targetPosition) < 0.05f)
        {
            targetIndex++;
            if (targetIndex >= path.Count)
            {
                path = null; // Path completed
            }
        }
    }

    void AvoidWalls()
    {
        // Convert positions to Vector2 for the Raycast
        Vector2 currentPos2D = new Vector2(transform.position.x, transform.position.y);
        Vector2 targetPos2D = new Vector2(
            path[targetIndex].worldPosition.x,
            path[targetIndex].worldPosition.y
        );

        // Define a distance based on the NPC size, accounting for extra room
        float detectionDistance = gridManager.nodeRadius + 0.6f; // Slightly larger to account for NPC size

        // Raycast to detect walls in the NPC's path
        RaycastHit2D hit = Physics2D.Raycast(
            currentPos2D,
            targetPos2D - currentPos2D,
            detectionDistance,
            gridManager.unwalkableMask
        );

        if (hit.collider != null)
        {
            // If there's a wall directly in the way, calculate an avoidance direction
            Vector2 avoidanceDirection = Vector2.Perpendicular(hit.normal).normalized;

            // Check which side to shift to (left or right of the obstacle)
            if (Vector2.Dot(avoidanceDirection, targetPos2D - currentPos2D) < 0)
            {
                avoidanceDirection = -avoidanceDirection; // Flip direction if necessary
            }

            // Adjust the NPC's position to avoid the wall
            float avoidanceAmount = 0.1f; // Adjust the amount the NPC shifts to avoid corners
            transform.position += (Vector3)(avoidanceDirection * avoidanceAmount);

            Debug.Log("Avoiding wall at: " + hit.point);
        }
    }
}
